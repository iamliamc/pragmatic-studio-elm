Example of Anonymous function
String.filter (\c -> c == 'e') "eieio"
isKeeper c = c == 'e'
String.filter isKeeper "eieio"

Elm has Type Inference (it can infer based on types of actions,
feels dynamic but with benefits of compcile time type checking (not runtime))
greet name = "Hi, " ++ name
<function> : String -> String
half x = x / 2
<function> : Float -> Float
half x = x // 2
<function> : Int -> Int
Type annotations help make clear the contract of functions

When you call a function with the "incorrect number of arguments" it passes back partially applied function
all functions in elm are curried "don't need to pass all the arguments at once"
playerInfo : String -> Int -> String
threeTimes = String.repeat 3
threeTimes "ho"
"hohoho" : String
"WOW" |> String.repeat 3 |> String.pad 20 '*' ### both return partially applied functions and then use "WOW" as final argument
> names = ["Liam", "Patty", "Mooch"]
["Liam","Patty","Mooch"] : List String
List.map
<function : (a -> b) -> List a -> List b
Create partially applied function that satisifies the argument (a -> b) of List.map
starStudded = String.pad 10 '*'
<function : String - String
List.map starStudded names
["***Liam***","***Patty**","***Mooch**"] : List String

Type aliases are essentially constructors for objects
In Elm anytime a user interacts with the page a 'message/actions/events' is generated
All values in elm are immutable, on update model it generates a new one not updating the present

Elm Architecture: (Transform Data with Stateless Methods Elm Handles Everything Else)

Model
type alias Model = {}
initialModel : Model
initialModel = {}

Update
type Msg = New Game | ...
update : Msg -> Model -> Model
update msg model = ...

View:
view: Model -> Html Msg
view model = ...

main =
Html.beginnerProgram
{model = initialModel
, view = view
, update = update
}

Updating Records in Elm (What you see happening in update model often):
> person
{ first = "Fred", last = "Flintstone" } : { first : String, last : String }
> newPerson = { person | first =  "Wilma" }
{ first = "Wilma", last = "Flintstone" } : { last : String, first : String }

Example of passing anonymous function to List.filter
> List.filter
<function> : (a -> Bool) -> List a -> List a
> numbers = List.range -3 3
[-3,-2,-1,0,1,2,3] : List Int
> List.filter (\n -> n > 0) numbers
[1,2,3] : List Int

Elm calls ---> Http Request / Websockets or Writing to Local Storage -> Effects
Have to switch from beginnerProgram to Program to enable Cmd
Subscriptions register interest in websock message or location changes

Command is all data no effect... Elm Runtime runs command, update is runned again that includes the commands result

Result is a Union Type:
> String.toInt
<function> : String -> Result.Result String Int
> String.toInt "1"
Ok 1 : Result.Result String Int
> String.toInt "A"
Err "could not convert string 'A' to an Int" : Result.Result String Int

How to run multiple commands:
NewGame ->
    ( model, Cmd.batch [ generateRandomNumber, getEntries ] )

Debug returns value
Suppose you want to log the model returned by a branch in the update function
    NewRandom randomNumber ->
    ( Debug.log "model" { model | gameNumber = randomNumber }, Cmd.none )

Decoding JSON to Elm values
> json = "{\"id\":1, \"phrase\":\"Future-Proof\", \"points\":100}"
"{\"id\":1, \"phrase\":\"Future-Proof\", \"points\":100}" : String
> idDecoder = field "id" int
<decoder> : Json.Decode.Decoder Int
> result = decodeString idDecoder json
Ok 1 : Result.Result String Int
> ageDecoder = field "age" int
<decoder> : Json.Decode.Decoder Int
> result = decodeString ageDecoder json
Err "Expecting an object with a field named `age` but instead got: {\"id\":1,\"phrase\":\"Future-Proof\",\"points\":100}"
    : Result.Result String Int
  > Entry
  <function> : Int -> String -> Int -> Bool -> Bingo.Entry
  > entryDecoder = map3 Entry idDecoder phraseDecoder pointsDecoder
  <decoder> : Json.Decode.Decoder (Bool -> Bingo.Entry)

Maybe Key Defaults:
Maybe.withDefault "Anonymous" maybeName
(List.head numbers) |> Maybe.andThen (\n -> Just(n * 3))

Union types work very well to use different application states:
type GameState
    = EnteringName
    | Playing
Various parts of the update schema set these to values...
Then you casematch on the unionType statemachine
viewNameInput : Model -> Html Msg
viewNameInput model =
    case model.gameState of
        EnteringName ->
            div [ class "name-input" ]
                [ input
                    [ type_ "text"
                    , placeholder "Who's Playing"
                    , value model.nameInput
                    , autofocus True
                    , onInput SetNameInput
                    ]
                    []
                , button [ onClick SaveName ] [ text "Save" ]
                , button [ onClick CancelName ] [ text "Cancel" ]
                ]

        Playing ->
            text ""
And show parts of the view etc. 
