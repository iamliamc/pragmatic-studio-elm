Example of Anonymous function
String.filter (\c -> c == 'e') "eieio"
isKeeper c = c == 'e'
String.filter isKeeper "eieio"

Elm has Type Inference (it can infer based on types of actions,
feels dynamic but with benefits of compcile time type checking (not runtime))
greet name = "Hi, " ++ name
<function> : String -> String
half x = x / 2
<function> : Float -> Float
half x = x // 2
<function> : Int -> Int
Type annotations help make clear the contract of functions

When you call a function with the "incorrect number of arguments" it passes back partially applied function
all functions in elm are curried "don't need to pass all the arguments at once"
playerInfo : String -> Int -> String
threeTimes = String.repeat 3
threeTimes "ho"
"hohoho" : String
"WOW" |> String.repeat 3 |> String.pad 20 '*' ### both return partially applied functions and then use "WOW" as final argument
> names = ["Liam", "Patty", "Mooch"]
["Liam","Patty","Mooch"] : List String
List.map
<function : (a -> b) -> List a -> List b
Create partially applied function that satisifies the argument (a -> b) of List.map
starStudded = String.pad 10 '*'
<function : String - String
List.map starStudded names
["***Liam***","***Patty**","***Mooch**"] : List String

Type aliases are essentially constructors for objects
In Elm anytime a user interacts with the page a 'message/actions/events' is generated
All values in elm are immutable, on update model it generates a new one not updating the present

Elm Architecture: (Transform Data with Stateless Methods Elm Handles Everything Else)

Model
type alias Model = {}
initialModel : Model
initialModel = {}

Update
type Msg = New Game | ...
update : Msg -> Model -> Model
update msg model = ...

View:
view: Model -> Html Msg
view model = ...

main =
Html.beginnerProgram
{model = initialModel
, view = view
, update = update
}

Updating Records in Elm (What you see happening in update model often):
> person
{ first = "Fred", last = "Flintstone" } : { first : String, last : String }
> newPerson = { person | first =  "Wilma" }
{ first = "Wilma", last = "Flintstone" } : { last : String, first : String }

Example of passing anonymous function to List.filter
> List.filter
<function> : (a -> Bool) -> List a -> List a
> numbers = List.range -3 3
[-3,-2,-1,0,1,2,3] : List Int
> List.filter (\n -> n > 0) numbers
[1,2,3] : List Int

Elm calls ---> Http Request / Websockets or Writing to Local Storage -> Effects
Have to switch from beginnerProgram to Program to enable Cmd
Subscriptions register interest in websock message or location changes
